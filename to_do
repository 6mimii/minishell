Allora l'idea sarebbe quella rpima di fare l'executore,
e poi guardare la parte fatta del parsing e migliorarla per combinare le due
in maniera che funzionino perfettamente.
Quindi iniziando facendo la mia parte direi che possiamo iniziare facendo una macro todo list
che poi verra espansa in goni foglio di testo dove far√≤ le mie varie considerazioni rispetto
a le cose che devo fare.

Come funziona uno shell in maniera basica:
1 - Reads its input from a file (see Shell Scripts), from a string supplied as an argument to the -c invocation option (see Invoking Bash), or from the user‚Äôs terminal.
2 - Breaks the input into words and operators, obeying the quoting rules described in Quoting. These tokens are separated by metacharacters.
	Alias expansion is performed by this step (see Aliases).
3 - Parses the tokens into simple and compound commands (see Shell Commands).
4 - Performs the various shell expansions (see Shell Expansions), breaking the expanded tokens into lists of filenames (see Filename Expansion) and commands and arguments.
5 - Performs any necessary redirections (see Redirections) and removes the redirection operators and their operands from the argument list.
6 - Executes the command (see Executing Commands).
7 - Optionally waits for the command to complete and collects its exit status (see Exit Status).

1 - Studio
	Con studio si intende comprensione del funzionamento di una shell,
	ed ovviamente anche di bash e tutto ci√≤ che la circonda.
	Come seconda cosa direi che bisogna riguardarsi i signal e invece
	studiare le pipes in modo da implementarle in maniera corretta e senza errori.
	successivamente direi che possiamo iniziare con la stesura del exe:

---> Guide e Documentazione
üìÑ Guida su Bash e Shell Scripting ‚Üí https://www.gnu.org/software/bash/manual/bash.html
üìÑ The Linux Programming Interface (Libro avanzato) ‚Üí https://man7.org/tlpi/
üìÑ Beej's Guide to Unix IPC (Inter-process communication) ‚Üí https://beej.us/guide/bgipc/html/
---> Video Tutorial
üé• Crash Course sulla Shell ‚Üí https://www.youtube.com/watch?v=tK9Oc6AEnR4
üé• Fork e Exec spiegati (creazione di processi in C) ‚Üí https://www.youtube.com/watch?v=8XBpUr9S0uk
---> Esercizi Pratici
üíª Scrivi la tua shell (Tutorial step-by-step) ‚Üí https://brennan.io/2020/01/16/write-a-shell/
üíª Minishell Project (Esempio da 42 School) ‚Üí https://github.com/Matthieu-Hernandez/Minishell

2 - Iniziare a scrivere l'exe:
	todo
ho scritto la funzione principale, bisogna ora quindi iniziare con la stesura delle componenti e l'implementzaione di tutte le varie funzioni:
L'idea √® quella di creare un file per ciscuna funzione builtin che devo fare e un file per comandi singoli o multipli. Tutte le utils e il resto, le andr√≤ a creare
successivamwente in un file distinto. Per lo studio ho tovato 2 - 3 nuovi link che potrebbero essere utili:
üìÑ https://www.cs.purdue.edu/homes/grr/SystemsProgrammingBook/Book/Chapter5-WritingYourOwnShell.pdf
üìÑ https://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html
üíª https://github.com/Swoorup/mysh
üíª https://brennan.io/2015/01/16/write-a-shell-in-c/


3 - Programmazione
---> 14-15 marzo (Venerd√¨-Sabato): Progettazione e struttura base

Definire la struttura dati per i comandi processati dal parser
Implementare la funzione principale dell'executor che riceve l'input dal parser
Pianificare l'architettura per gestire comandi semplici, pipe e redirezioni

---> 16-17 marzo (Domenica-Luned√¨): Comandi semplici e built-in

Implementare l'esecuzione di comandi semplici usando execve
Implementare i comandi built-in richiesti (echo, cd, pwd, export, unset, env, exit)
Gestire la ricerca del percorso dell'eseguibile basandosi sulla variabile PATH

---> 18-19 marzo (Marted√¨-Mercoled√¨): Pipe e redirezioni

Implementare la gestione delle pipe (|) tra comandi
Implementare le redirezioni base (< e >)
Implementare le redirezioni avanzate (<< e >>)

---> 20 marzo (Gioved√¨): Gestione segnali e variabili d'ambiente

Implementare la gestione dei segnali (ctrl-C, ctrl-D, ctrl-)
Gestire l'espansione delle variabili d'ambiente ($VAR)
Gestire lo status di uscita ($?)

---> 21-22 marzo (Venerd√¨-Sabato): Integrazione e test iniziali

Integrare l'executor con il parsing completato dal tuo compagno
Eseguire test base su comandi semplici e redirezioni
Risolvere i problemi di integrazione iniziali

---> 23-24 marzo (Domenica-Luned√¨): Testing completo e debug

Test completo di tutte le funzionalit√† richieste
Verifica dei casi edge e comportamenti speciali
Correzione dei bug identificati
Verifica della gestione della memoria (no memory leak)

---> 25 marzo (Marted√¨): Finalizzazione